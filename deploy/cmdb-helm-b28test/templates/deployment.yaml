---
{{- define "envtpl" }}
- name: redisIp
  valueFrom:
    secretKeyRef:
      name: metadb-secret
      key: redisIp
- name: redisPass
  valueFrom:
    secretKeyRef:
      name: metadb-secret
      key: redisPass
- name: redisPort
  valueFrom:
    secretKeyRef:
      name: metadb-secret
      key: redisPort
- name: mongoPort
  valueFrom:
    secretKeyRef:
      name: metadb-secret
      key: mongoPort
- name: mongoIp
  valueFrom:
    secretKeyRef:
      name: metadb-secret
      key: mongoIp
{{- end }}

{{ $repository := .Values.image.repository}}
{{ $tag := .Values.image.tag }}
{{ $pullPolicy := .Values.env.pullPolicy }}
{{ $cache := .Values.cache.enabled}}
{{ $cacheLabels := .Values.cache.labels}}
{{- range .Values.apps }}
  {{- with . }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .name }}
  labels:
    app:  {{ .name }}
spec:
  replicas: 1
  revisionHistoryLimit: 3
  selector:
    matchLabels:
      app:  {{ .name }}
  template:
    metadata:
      labels:
        app:  {{ .name }}
#      annotations:
#        timestamp: {{ now | quote }}
    spec:
      {{- if and $cache .cacheAffinity}}
      affinity:
        podAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - topologyKey: kubernetes.io/hostname
              labelSelector:
                matchLabels:
                {{- range $val := $cacheLabels }}
                  {{  $val.name  }}: {{ $val.value }}
                {{- end }}
      {{- end}}
      containers:
        - name:  {{ .name }}
          env:
            {{- include "mytemplate" . | indent 12 }}
          image: {{ $repository }}cmdb_{{ .name}}:{{ $tag }}
          {{- if $pullPolicy }}
          imagePullPolicy: {{ $pullPolicy }}
          {{- end}}
          ports:
          {{- if eq .name  "webserver" }}
          {{- range .ports }}
          - containerPort: {{ .port }}
            protocol: TCP
          {{- end }}
          {{- else }}
          - containerPort: {{ .port }}
            protocol: TCP
          {{- end}}
          resources:
            requests:
              cpu: 200m
              memory: 256Mi
#            limits:
#              cpu: 500m
#              memory: 512m

          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              {{- if eq .name  "webserver" }}
              {{ with index .ports 0 }}
              port: {{ .port }}
              {{- end}}
              {{- else }}
              port: {{ .port }}
              {{- end}}
            initialDelaySeconds: 10
            periodSeconds: 10
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              {{- if eq .name  "webserver" }}
              {{ with index .ports 0 }}
              port: {{ .port }}
              {{- end}}
              {{- else }}
              port: {{ .port }}
              {{- end}}

            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
      initContainers:
        - name: init-redis
          env:
            {{- include "mytemplate" . | indent 12 }}
          image: harbor.dev.21vianet.com/library/redis:bitnami-6.2.6-debian-10-r103
          command: [ 'sh','-c',"env && until redis-cli -h ${redisIp} -p ${redisPort} -a ${redisPass} PING;do echo waiting for redis; sleep 10; done" ]
#          command: [ 'sh','-c',"env && until redis-cli -h ${redisIp}.$(cat /var/run/secrets/kubernetes.io/serviceaccount/namespace).svc.cluster.local -p ${redisPort} -a ${redisPass} PING;do echo waiting for redis; sleep 10; done" ]
        - name: init-mongo
          env:
            {{- include "mytemplate" . | indent 12 }}
          image: harbor.dev.21vianet.com/cmdb/mongo:4.4.13-debian-10-r52
          # mongo-mongodb-1 finish,cluster finish
#          command: [ 'sh', '-c', 'env && until mongo "mongodb://${mongoUser}:${mongoPass}@${mongoIp}.$(cat /var/run/secrets/kubernetes.io/serviceaccount/namespace).svc.cluster.local:${mongoPort}/?replicaSet=rs0&connectTimeoutMS=10000&authSource=${mongoAuthDB}&authMechanism=SCRAM-SHA-256" --disableImplicitSessions --eval "db.serverStatus().connections"; do echo waiting for mongodb1; sleep 10; done' ]
          command: [ 'sh', '-c', 'env 
              && (mongo  mongodb://${mongoIp}:${mongoPort}/${mongoRootAuthDB} -u ${mongoRootUser} -p ${mongoRootPass} --authenticationDatabase ${mongoRootAuthDB} < /js/createUser.js|| exit 0)
              && until mongo "mongodb://cc:cc@${mongoIp}:${mongoPort}/?replicaSet=rs0&connectTimeoutMS=10000&authSource=cmdb&authMechanism=SCRAM-SHA-256" --disableImplicitSessions --eval "db.serverStatus().connections"; do echo waiting for mongodb1; sleep 10; done' ]
 #         command: [ 'sh', '-c', 'until  mongo "mongodb://cc:cc@${mongoIp}:${mongoPort}/cmdb --disableImplicitSessions --eval "db.adminCommand("ping")'; do echo waiting for ${mongoIp}; sleep 10; done' ]
          volumeMounts: #挂载到容器
            - name: mongocreateuserjs
              mountPath: /js/createUser.js
              subPath: createUser.js
      volumes:
        - name: mongocreateuserjs
          configMap: #指定为configmap文件
            name: mongocreateuserjs      #刚才创建的redis-config的cm文件
---
{{- end}}
  {{- end }}
